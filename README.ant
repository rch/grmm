README file for MALLET's ant

See also the ant manual at http://ant.apache.org/manual/index.html


1. About Ant

From http://ant.apache.org:

"Apache Ant is a Java-based build tool. In theory, it is kind of like Make, but
without Make's wrinkles.

"Why another build tool when there is already make, gnumake, nmake, jam,
and others? Because all those tools have limitations that Ant's
original author couldn't live with when developing software across
multiple platforms. Make-like tools are inherently shell-based -- they
evaluate a set of dependencies, then execute commands not unlike what
you would issue in a shell. This means that you can easily extend
these tools by using or writing any program for the OS that you are
working on. However, this also means that you limit yourself to the
OS, or at least the OS type such as Unix, that you are working on.

"Makefiles are inherently evil as well. Anybody who has worked on them
for any time has run into the dreaded tab problem. "Is my command not
executing because I have a space in front of my tab!!!" said the
original author of Ant way too many times. Tools like Jam took care of
this to a great degree, but still have yet another format to use and
remember.

"Ant is different. Instead of a model where it is extended with
shell-based commands, Ant is extended using Java classes. Instead of
writing shell commands, the configuration files are XML-based, calling
out a target tree where various tasks get executed. Each task is run
by an object that implements a particular Task interface.

"Granted, this removes some of the expressive power that is inherent
by being able to construct a shell command such as `find . -name foo
-exec rm {}`, but it gives you the ability to be cross platform -- to
work anywhere and everywhere. And hey, if you really need to execute a
shell command, Ant has an <exec> task that allows different commands
to be executed based on the OS that it is executing on."


2. Using Ant

Ant uses the file build.xml to define build targets, as make uses the
file named Makefile.  To use, first install ant, which can be obtained
from http://ant.apache.org.  With the program ant in your $PATH 
and $JAVA_HOME set (to /usr/java on dandenong), run 'ant' to compile
the entire source.    To compile individual targets, run 'ant
target_name'.  For example, in the initial build.xml, I have defined
the target 'base', which can be compile by running 'ant base'.


3. The build.xml file

The build file can specify many tasks other than compilation,
including java binary executions and many shell commands.  This is an
example of a target which executes the class 'TUI', in the package
'edu.umass.cs.mallet.users.lambert.acerelations' with several arguments:

  <target name="nwire" description="Run TUI on nwire ACE data" >
    <java classpath="class:lib/mallet-deps.jar" fork="true" maxmemory="200m" classname="edu.umass.cs.mallet.users.lambert.acerelations.TUI" output="output_file">
      <arg value="acefiles/nwire"/>
      <arg value="classify"/>
      <arg value="defined"/>
    </java>
  </target>

Full documentation about the build.xml file is located in the ant
manual, http://ant.apache.org/manual/index.html.
